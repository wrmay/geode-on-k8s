---
- name: add runas user
  command: adduser -D {{ runas_user }}

- name: install required software
  apk:
    name: ['openjdk8', 'git', 'tar', 'bash','ncurses','dumb-init']
    update_cache: yes

# Alpine linux doesn't use pam by default so these tasks are skipped
#- name: increase nproc soft limit
#  become: yes
#  pam_limits:
#    domain: "{{ runas_user }}"
#    limit_item: nproc
#    limit_type: soft
#    value: 8192
#
#- name: increase nproc hard limit
#  pam_limits:
#    domain: "{{ runas_user }}"
#    limit_item: nproc
#    limit_type: hard
#    value: 81920
#

- name: increase somaxcon
  sysctl:
      name: net.core.somaxconn
      value: 1280

- name: disable syn cookies
  sysctl:
    name: net.ipv4.tcp_syncookies
    value: 0

- name: make the locator working dir
  file:
    path: /runtime/geode_cluster/locator
    state: directory
    owner: "{{ runas_user }}"

- name: make the datanode working dir
  file:
    path: /runtime/geode_cluster/datanode
    state: directory
    owner: "{{ runas_user }}"

- name: download geode
  get_url:
    url: "{{ geode_download.url }}"
    dest: /runtime
    checksum: "{{ geode_download.checksum }}"

- name: unpack geode
  unarchive:
    src: /runtime/{{ geode_download.url | urlsplit('path') | basename }}
    dest: /runtime
    remote_src: yes
    owner: "{{ runas_user }}"

- name: create Geode symbolic link
  file:
      path: /runtime/geode
      src: /runtime/{{ geode_download.url | urlsplit('path') | basename | replace('.tgz','') }}
      state: link
      owner: "{{ runas_user }}"

#- name: download and unpack Maven
#    unarchive:
#        remote_src: yes
#        src:  http://apache.cs.utah.edu/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz
#        dest: /runtime
#        owner: "{{ runas_user }}"
#
#- name: create Maven symbolic link
#    file:
#        path: /runtime/maven
#        src: /runtime/apache-maven-3.6.0
#        remote_src: yes
#        state: link
#        owner: "{{ runas_user }}"
#
#- name: configure the bash profile
#    copy:
#        src: setuptasks/ConfigureProfile/bash_profile
#        dest: /home/{{ ansible_ssh_user }}/.bash_profile
#        owner: "{{ ansible_ssh_user }}"
#        group: "{{ ansible_ssh_user }}"
#
#- name: configure maven
#    copy:
#        src: setuptasks/ConfigureMaven/settings.xml
#        dest: /home/{{ ansible_ssh_user }}/.m2/
#        owner: "{{ ansible_ssh_user }}"
#        group: "{{ ansible_ssh_user }}"
#
#- name: git clone  gemfire-manager
#    git:
#        repo: https://github.com/Pivotal-Data-Engineering/gemfire-manager
#        clone: yes
#        version: 2.1
#        recursive: no
#        depth: 1
#        dest: /runtime/gemfire-manager
#
#- name: setup the cluster working directories
#    copy:
#        src: cluster.json
#        dest: /runtime/gem_cluster_1/
#        owner: "{{ ansible_ssh_user }}"
#        group: "{{ ansible_ssh_user }}"
#
#- name: copy gemfire-manager scripts to cluster working directory
#    copy:
#        src: /runtime/gemfire-manager/{{ item }}
#        remote_src: yes
#        dest: /runtime/gem_cluster_1/
#        owner: "{{ ansible_ssh_user }}"
#        group: "{{ ansible_ssh_user }}"
#    loop: ['gf.py', 'cluster.py', 'clusterdef.py', 'gemprops.py']
#
#- name: git clone  gemfire-toolkit
#    git:
#        repo: https://github.com/Pivotal-Data-Engineering/gemfire-toolkit
#        clone: yes
#        version: gemfire-toolkit-2.1
#        recursive: no
#        depth: 1
#        dest: /runtime/gemfire-toolkit
#
#- name: build gemfire-toolkit
#    command: /runtime/maven/bin/mvn package
#    args:
#        chdir: /runtime/gemfire-toolkit
#
#- name: install gemfire-toolkit
#    unarchive:
#        remote_src: yes
#        src:  /runtime/gemfire-toolkit/target/gemfire-toolkit-2.1-runtime.tar.gz
#        dest: /runtime/gem_cluster_1
#        owner: "{{ ansible_ssh_user }}"
#        group: "{{ ansible_ssh_user }}"
#
#- name: copy keypair to cluster home
#    copy:
#        src:  yak-keypair.pem
#        dest: /runtime/gem_cluster_1
#        owner: "{{ ansible_ssh_user }}"
#        group: "{{ ansible_ssh_user }}"
#        mode: 0600
#
#- name: copy SSL files to cluster home
#    copy:
#        src:  "{{ item }}"
#        dest: /runtime/gem_cluster_1/{{ item }}
#        owner: "{{ ansible_ssh_user }}"
#        group: "{{ ansible_ssh_user }}"
#    loop: ['gfsecurity.properties','trusted.keystore']
